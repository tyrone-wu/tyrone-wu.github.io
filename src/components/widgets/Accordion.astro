---
import { Icon } from "astro-icon/components";

interface Props {
  buttonClasses: string;
  iconClasses: string;
  contentsClasses: string;
}

// this is dumb but whatever lol
const { buttonClasses, iconClasses, contentsClasses } = Astro.props;
---

<div class="accordion">
  <button
    class:list={["accordion__button", buttonClasses]}
    aria-label="accordion"
  >
    {
      Astro.slots.has("title") && (
        <div class="accordion__title">
          <slot name="title" />
        </div>
      )
    }
    <Icon name="arrow-down" class:list={["accordion__chevron", iconClasses]} />
  </button>
  <div
    class:list={[
      "accordion__content max-h-0 hidden overflow-hidden",
      contentsClasses,
    ]}
  >
    <slot name="contents" />
  </div>
</div>

<script>
  function accordionSetup() {
    const accordionMenus = document.querySelectorAll(
      ".accordion",
    ) as NodeListOf<HTMLElement>;

    accordionMenus.forEach((accordionMenu) => {
      const accordionButton = accordionMenu.querySelector(
        ".accordion__button",
      ) as HTMLElement;
      const accordionTitle = accordionMenu.querySelector(
        ".accordion__title",
      ) as HTMLElement;
      const accordionChevron = accordionMenu.querySelector(
        ".accordion__chevron",
      ) as HTMLElement;
      const accordionContent = accordionMenu.querySelector(
        ".accordion__content",
      ) as HTMLElement;

      if (accordionButton && accordionContent && accordionChevron) {
        accordionButton.addEventListener("click", (event) => {
          if (!accordionMenu.classList.contains("active")) {
            accordionButton.classList.add("current-highlight");
            accordionButton.classList.add("border-b-2");
            accordionMenu.classList.add("active");
            if (accordionTitle) {
              accordionTitle.classList.add("font-bold");
            }
            accordionContent.classList.remove("hidden");
            accordionContent.style.maxHeight =
              accordionContent.scrollHeight + "rem";
            accordionChevron.classList.add("rotate-180");
          } else {
            accordionButton.classList.remove("current-highlight");
            accordionButton.classList.remove("border-b-2");
            accordionMenu.classList.remove("active");
            if (accordionTitle) {
              accordionTitle.classList.remove("font-bold");
            }
            accordionContent.classList.add("hidden");
            accordionContent.style.maxHeight = "0rem";
            accordionChevron.classList.remove("rotate-180");
          }

          event.preventDefault();
          return false;
        });
      }
    });
  }

  accordionSetup();
  document.addEventListener("astro:after-swap", accordionSetup);
</script>
